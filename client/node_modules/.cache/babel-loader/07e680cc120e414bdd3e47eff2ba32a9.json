{"ast":null,"code":"var _jsxFileName = \"/Users/ashianagi/Desktop/TechWorks/findyourjob/client/src/searchbar.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport Result from './result';\nimport ReactTags from 'react-tag-autocomplete';\nvar skills = [];\nvar results = [];\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangedEvent = e => {\n      let value = e.target.value;\n      value = value.toLowerCase();\n      let matches = [];\n\n      if (value.length > 0) {\n        const regex = new RegExp(\"^\".concat(value));\n        matches = this.state.data.sort().filter(val => regex.test(val));\n      }\n\n      this.setState(() => ({\n        matches\n      }));\n    };\n\n    this.handleEnterKey = e => {\n      const matches = this.state.matches;\n\n      if (e.key === 'Enter' && matches.length > 0) {\n        skills.push(e.target.value);\n        this.handleAddition(e.target.value);\n      } else if (e.key === 'Enter' && matches.length === 0) {\n        this.setState({\n          errorMessage: \"Skill does not exist in the database. Try Again!\"\n        });\n      } else if (e.key === 'Backspace') {\n        this.setState({\n          errorMessage: ''\n        });\n      }\n    };\n\n    this.fetchResults = async skills => {\n      skills.map(async function (skill) {\n        try {\n          const res = await axios.get(\"/api/results/\".concat(skill));\n          let resultsArray = res.data.map(result => result.jobs_name);\n          results = results.concat(resultsArray);\n          this.setState({\n            results: results\n          });\n          console.log(this.state.results, \"results\");\n        } catch (error) {\n          console.log(error);\n        }\n      }, this);\n    };\n\n    this.state = {\n      data: [],\n      tags: [],\n      matches: [],\n      results,\n      skills,\n      errorMessage: ''\n    };\n  } // fetching skills from database and updating it to data in state. \n\n\n  async componentDidMount() {\n    try {\n      const res = await axios.get(\"/api/skills\");\n      let skillsArray = res.data.map(skill => skill.skill_name);\n      this.setState({\n        data: skillsArray\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  } //matching inputted skill to skills stored in data\n\n\n  //outputs results of matched skills to user. \n  outputResults() {\n    const matches = this.state.matches;\n\n    if (matches.length === 0) {\n      return null;\n    }\n\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, matches.map(item => React.createElement(\"li\", {\n      key: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, item)));\n  }\n\n  handleDelete(i) {\n    const tags = this.state.tags.slice(0);\n    tags.splice(i, 1);\n    this.setState({\n      tags\n    });\n  }\n\n  handleAddition(tag) {\n    const tags = [].concat(this.state.tags, tag);\n    this.setState({\n      tags\n    });\n  } //handling input errors \n\n\n  //sorts the job results from most common to least\n  compressArray(results) {\n    var jobResults = [];\n    var copy = results.slice(0);\n\n    for (var i = 0; i < results.length; i++) {\n      var jobCount = 0;\n\n      for (var w = 0; w < copy.length; w++) {\n        if (results[i] === copy[w]) {\n          jobCount++;\n          delete copy[w];\n        }\n      }\n\n      if (jobCount > 0) {\n        var obj = {};\n        obj.value = results[i];\n        obj.count = jobCount;\n        jobResults.push(obj);\n      }\n    }\n\n    jobResults = jobResults.sort((a, b) => a.count < b.count ? 1 : -1);\n    console.log(jobResults);\n    return jobResults;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.onChangedEvent,\n      onKeyDown: e => this.handleEnterKey(e),\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), this.outputResults(), this.state.errorMessage, React.createElement(ReactTags, {\n      tags: this.state.tags,\n      suggestions: this.state.suggestions,\n      handleDelete: this.handleDelete.bind(this),\n      handleAddition: this.handleAddition.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => this.fetchResults(this.state.skills),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \" Search\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Result, {\n      compressArray: this.compressArray,\n      results: this.state.results,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/ashianagi/Desktop/TechWorks/findyourjob/client/src/searchbar.js"],"names":["React","axios","Result","ReactTags","skills","results","Search","Component","constructor","props","onChangedEvent","e","value","target","toLowerCase","matches","length","regex","RegExp","state","data","sort","filter","val","test","setState","handleEnterKey","key","push","handleAddition","errorMessage","fetchResults","map","skill","res","get","resultsArray","result","jobs_name","concat","console","log","error","tags","componentDidMount","skillsArray","skill_name","outputResults","item","handleDelete","i","slice","splice","tag","compressArray","jobResults","copy","jobCount","w","obj","count","a","b","render","suggestions","bind"],"mappings":"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","sourcesContent":["import React from 'react'; \nimport axios from 'axios'; \nimport Result from './result'; \nimport ReactTags from 'react-tag-autocomplete'; \n\nvar skills = []; \nvar results = []; \n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props); \n        this.state = {\n            data: [], \n            tags:[], \n            matches: [], \n            results, \n            skills, \n            errorMessage: '',\n        } \n\n    }\n\n    // fetching skills from database and updating it to data in state. \n    async componentDidMount() {\n        try {\n            const res = await axios.get(\"/api/skills\")\n            let skillsArray = res.data.map(skill => skill.skill_name) \n            this.setState({\n                data: skillsArray,\n            })\n        } catch(error){\n            console.log(error)\n        }\n    }\n\n    //matching inputted skill to skills stored in data\n    onChangedEvent = (e) => {\n        let value = e.target.value;\n        value = value.toLowerCase(); \n        let matches  = []; \n        if (value.length > 0) {\n            const regex = new RegExp(`^${value}`); \n            matches = this.state.data.sort().filter(val => regex.test(val))\n        }\n       this.setState(()=> ({matches}));\n    }\n  \n    //outputs results of matched skills to user. \n    outputResults () {\n        const { matches } = this.state; \n        if (matches.length ===  0 ) {\n            return null; \n        } \n        return (\n            <ul> \n                {matches.map((item) => <li key={item}>{item}</li>)}\n            </ul>\n        )\n    }\n    handleDelete (i) {\n        const tags = this.state.tags.slice(0)\n        tags.splice(i, 1)\n        this.setState({ tags })\n      }\n     \n    handleAddition (tag) {\n        const tags = [].concat(this.state.tags, tag)\n        this.setState({ tags })\n    }\n\n\n    //handling input errors \n    handleEnterKey = (e) => {\n        const { matches } = this.state;\n        if(e.key === 'Enter' && matches.length > 0) {\n            skills.push(e.target.value); \n            this.handleAddition(e.target.value); \n        } else if(e.key === 'Enter' && matches.length === 0) {\n            this.setState({\n                errorMessage: \"Skill does not exist in the database. Try Again!\"\n            })\n         } else if(e.key === 'Backspace') {\n            this.setState({\n                errorMessage: ''\n            })\n        }\n    }\n\n    //fetching matched jobs from database.\n    fetchResults = async skills => {\n       skills.map(async function(skill) {\n            try {\n                const res = await axios.get(`/api/results/${skill}`); \n                let resultsArray = res.data.map(result => result.jobs_name);\n                results = results.concat(resultsArray); \n                this.setState({\n                    results: results\n                })\n                console.log(this.state.results, \"results\");\n            } catch(error) {\n                console.log(error);\n        }   }, this)\n    }\n\n    //sorts the job results from most common to least\n    compressArray(results) {\n            var jobResults = [];\n            var copy = results.slice(0);\n            for (var i = 0; i < results.length; i++) {\n                var jobCount = 0;\t\n                for (var w = 0; w < copy.length; w++) {\n                    if (results[i] === copy[w]) {\n                        jobCount++;\n                        delete copy[w];\n                    }\n                }\n                if (jobCount > 0) {\n                    var obj = {};\n                    obj.value = results[i];\n                    obj.count = jobCount;\n                    jobResults.push(obj);\n                }\n            }\n            jobResults = jobResults.sort((a,b) => (a.count < b.count) ? 1: -1); \n            console.log(jobResults); \n            return jobResults;\n        }\n\n    render () {\n        return (\n            <div>    \n                <input onChange={this.onChangedEvent} onKeyDown={(e) => this.handleEnterKey(e)} type=\"text\"/> \n                {this.outputResults()}\n                {this.state.errorMessage} \n                <ReactTags\n                    tags={this.state.tags}\n                    suggestions={this.state.suggestions}\n                    handleDelete={this.handleDelete.bind(this)}\n                    handleAddition={this.handleAddition.bind(this)} />\n                <button type=\"button\" onClick={()=> this.fetchResults(this.state.skills)}> Search</button>\n                <div> \n                    <Result compressArray={this.compressArray} results={this.state.results}/> \n                </div>\n            </div>\n        )\n    }\n}\nexport default Search; "]},"metadata":{},"sourceType":"module"}