{"ast":null,"code":"var _jsxFileName = \"/Users/ashianagi/Desktop/TechWorks/findyourjob/src/searchbar.js\";\nimport React from \"react\";\nimport { tsMethodSignature } from \"@babel/types\";\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangedEvent = e => {\n      const value = e.target.value; //capture the char as user types\n\n      value = value.toLowerCase();\n      let matches = []; //matching input value to stored data\n\n      if (value.length > 0) {\n        const matched = new RegExp(\"^\".concat(value));\n        matches = this.data.sort().filter(val => val.test(matched));\n      }\n\n      this.setState(() => {\n        matches;\n      });\n    };\n\n    this.data = [{\n      1: \"java\"\n    }, {\n      2: \"javascript\"\n    }, {\n      3: \"sql\"\n    }];\n    this.state = {\n      matches: []\n    };\n  } //function to match characters. \n\n\n  outputResults() {\n    const matched = this.state.matched; //if nothing is matched then output null. \n\n    if (matched.length === 0) {\n      return null;\n    } //return the matched array. \n\n\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, this.matched.map((item, index) => React.createElement(\"li\", {\n      key: index + 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, item[index + 1])));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.onChangedEvent,\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, this.data.map((item, index) => React.createElement(\"li\", {\n      key: index + 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, item[index + 1]))));\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/ashianagi/Desktop/TechWorks/findyourjob/src/searchbar.js"],"names":["React","tsMethodSignature","Search","Component","constructor","props","onChangedEvent","e","value","target","toLowerCase","matches","length","matched","RegExp","data","sort","filter","val","test","setState","state","outputResults","map","item","index","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,cAAlC;;AAEA,MAAMC,MAAN,SAAqBF,KAAK,CAACG,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAanBC,cAbmB,GAaDC,CAAD,IAAO;AACpB,YAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAvB,CADoB,CACU;;AAC9BA,MAAAA,KAAK,GAAGA,KAAK,CAACE,WAAN,EAAR;AACA,UAAIC,OAAO,GAAI,EAAf,CAHoB,CAIpB;;AACA,UAAIH,KAAK,CAACI,MAAN,GAAe,CAAnB,EAAsB;AAClB,cAAMC,OAAO,GAAG,IAAIC,MAAJ,YAAeN,KAAf,EAAhB;AACAG,QAAAA,OAAO,GAAG,KAAKI,IAAL,CAAUC,IAAV,GAAiBC,MAAjB,CAAwBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAASN,OAAT,CAA/B,CAAV;AACH;;AACD,WAAKO,QAAL,CAAc,MAAI;AAAET,QAAAA,OAAO;AAAE,OAA7B;AACH,KAvBkB;;AAEf,SAAKI,IAAL,GAAY,CACR;AAAC,SAAG;AAAJ,KADQ,EAER;AAAC,SAAG;AAAJ,KAFQ,EAGR;AAAC,SAAG;AAAJ,KAHQ,CAAZ;AAKA,SAAKM,KAAL,GAAa;AACTV,MAAAA,OAAO,EAAE;AADA,KAAb;AAGH,GAXgC,CAajC;;;AAaAW,EAAAA,aAAa,GAAI;AAAA,UACLT,OADK,GACO,KAAKQ,KADZ,CACLR,OADK,EAEb;;AACA,QAAIA,OAAO,CAACD,MAAR,KAAoB,CAAxB,EAA4B;AACxB,aAAO,IAAP;AACH,KALY,CAMb;;;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKC,OAAL,CAAaU,GAAb,CAAiB,CAACC,IAAD,EAAMC,KAAN,KAAgB;AAAI,MAAA,GAAG,EAAEA,KAAK,GAAC,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBD,IAAI,CAACC,KAAK,GAAG,CAAT,CAAvB,CAAjC,CADL,CADJ;AAMH;;AAEDC,EAAAA,MAAM,GAAI;AACN,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,QAAQ,EAAE,KAAKpB,cAAtB;AAAsC,MAAA,IAAI,EAAC,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKS,IAAL,CAAUQ,GAAV,CAAc,CAACC,IAAD,EAAMC,KAAN,KAAgB;AAAI,MAAA,GAAG,EAAEA,KAAK,GAAC,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBD,IAAI,CAACC,KAAK,GAAG,CAAT,CAAvB,CAA9B,CADL,CAFJ,CADJ;AAQH;;AAlDgC;;AAqDrC,eAAevB,MAAf","sourcesContent":["import React from \"react\"; \nimport { tsMethodSignature } from \"@babel/types\";\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props); \n        this.data = [\n            {1: \"java\"},\n            {2: \"javascript\"},\n            {3: \"sql\"}\n        ]; \n        this.state = {\n            matches: []\n        } \n    }\n    \n    //function to match characters. \n    onChangedEvent = (e) => {\n        const value = e.target.value; //capture the char as user types\n        value = value.toLowerCase(); \n        let matches  = []; \n        //matching input value to stored data\n        if (value.length > 0) {\n            const matched = new RegExp(`^${value}`); \n            matches = this.data.sort().filter(val => val.test(matched))\n        }\n        this.setState(()=>{ matches })\n    }\n\n    outputResults () {\n        const { matched } = this.state; \n        //if nothing is matched then output null. \n        if (matched.length ===  0 ) {\n            return null; \n        }\n        //return the matched array. \n        return (\n            <ul> \n                {this.matched.map((item,index) => <li key={index+1}>{item[index + 1]}</li>)}\n            </ul>\n        )\n\n    }\n\n    render () {\n        return (\n            <div>  \n                <input onChange={this.onChangedEvent} type=\"text\"/> \n                <ul> \n                    {this.data.map((item,index) => <li key={index+1}>{item[index + 1]}</li>)}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Search; "]},"metadata":{},"sourceType":"module"}